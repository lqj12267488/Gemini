<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd">

    <context:property-placeholder location="classpath:config.properties"/>
    <!-- 自动扫描组件，这里要把controler下面的 controller去除，他们是在spring-servlet.xml中配置的，如果不去除会影响事务管理的。   -->
    <!--2、开启基于注解的aop功能  -->
    <!--<aop:aspectj-autoproxy></aop:aspectj-autoproxy>-->
    <!--
     0）、被代理对象也得先加入到ioc中
     1）、编写日志切面，并加入到ioc中，@Component @Aspect
     2）、给切面编写通知方法。
     3）、加上何时何地切入的注解。切入点表达式
     4）、开启基于注解的aop功能即可
     -->
    <!-- 扫描注解 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <!-- 基本属性 Useruser、password -->
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="driverClassName" value="${jdbc.driver}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1"/>
        <property name="minIdle" value="1"/>
        <property name="maxActive" value="300"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <property name="validationQuery" value="SELECT 'x' FROM DUAl"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="20"/>
        <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
        <property name="filters" value="stat"/>
    </bean>
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath:mapper/*/*.xml"></property>
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageInterceptor">
                    <!-- 这里的几个配置主要演示如何使用，如果不理解，一定要去掉下面的配置 -->
                    <property name="properties">
                        <value>
                            helperDialect=oracle
                            reasonable=true
                            supportMethodsArguments=true
                            params=count=countSql
                            autoRuntimeDialect=true
                        </value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.goisan.**.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>
    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <!-- 定义事务管理器 -->
    <bean id="transactionManager" name="transManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!-- 注解方式配置事务 -->
    <tx:annotation-driven/>
    <!-- 拦截器方式配置事物 -->
    <!--    <tx:advice id="transactionAdvice" transaction-manager="transManager">
            <tx:attributes>
                <tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Exception" no-rollback-for="java.lang.RuntimeException"/>
                &lt;!&ndash;<tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.RuntimeException" />&ndash;&gt;
                &lt;!&ndash;<tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.RuntimeException" />&ndash;&gt;
                &lt;!&ndash;<tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.RuntimeException" />&ndash;&gt;
                <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception" />

                &lt;!&ndash;<tx:method name="find*" propagation="SUPPORTS" read-only="true" />&ndash;&gt;
                &lt;!&ndash;<tx:method name="get*" propagation="SUPPORTS" read-only="true" />&ndash;&gt;
                &lt;!&ndash;<tx:method name="select*" propagation="SUPPORTS" read-only="true" />&ndash;&gt;
                &lt;!&ndash;<tx:method name="*" propagation="REQUIRED" rollback-for="java.lang.RuntimeException"/>&ndash;&gt;
            </tx:attributes>
        </tx:advice>-->
    <!-- 把事务控制在service层 -->
    <!--    <aop:config>
            &lt;!&ndash;
            |第一个 * —— 通配 随便率性返回值类型|
            |第四个 * —— 通配包com.goisan.*.*.service下的随便率性class|
            |倒数第一个 * —— 通配包com.goisan.*.*.service下的随便率性class的随便率性办法|
            |倒数 .. —— 通配 办法可以有0个或多个参数|
            &ndash;&gt;
            &lt;!&ndash; 定义切面 引用通知的bean &ndash;&gt;
            <aop:pointcut id="transactionPointcut" expression="execution(public * com.goisan.*.*.service.impl.*.*(..))" />
            <aop:advisor pointcut-ref="transactionPointcut"
                         advice-ref="transactionAdvice" />
            <aop:aspect ref="logAspect" order="1">
                &lt;!&ndash; 配置前置通知是哪个方法 &ndash;&gt;
                <aop:before method="logStart" pointcut="execution(public * com.goisan.*.*.service.impl.*.*(..))"/>
                <aop:after method="logEnd" pointcut-ref="transactionPointcut"/>
                &lt;!&ndash;returning指定返回值  &ndash;&gt;
                <aop:after-returning method="logReturn" pointcut-ref="transactionPointcut" returning="res"/>
                &lt;!&ndash;throwing指定异常参数的名 &ndash;&gt;
                <aop:after-throwing method="logException" pointcut-ref="transactionPointcut" throwing="abc"/>
            </aop:aspect>
        </aop:config>
        <bean id="logAspect" class="com.goisan.system.tools.LogAspect"></bean>-->


    <!-- 配置druid监控spring jdbc -->
    <!--<bean id="druid-stat-interceptor"
          class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
    </bean>
    <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"
          scope="prototype">
        <property name="patterns">
            <list>
                <value>com.goisan.**.service.*</value>
                <value>com.goisan.**.dao.*</value>
            </list>
        </property>
    </bean>
    <aop:config>
        <aop:advisor advice-ref="druid-stat-interceptor"
                     pointcut-ref="druid-stat-pointcut" />
    </aop:config>-->
</beans>